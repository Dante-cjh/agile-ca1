{"version":3,"file":"static/js/616.b5fd617a.chunk.js","mappings":"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","sources":["components/movie/movieReviews/index.js","util.js","components/movie/movieDetails/index.js","components/movie/movieCredits/index.js","pages/movieDetailsPage.js"],"sourcesContent":["import React, { useEffect, useState }  from \"react\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getMovieReviews } from \"../../../api/tmdb-api\";\r\nimport { excerpt } from \"../../../util\";\r\n\r\nexport default function MovieReviews({ movie }) {\r\n  const [reviews, setReviews] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getMovieReviews(movie.id).then((reviews) => {\r\n      setReviews(reviews);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table sx={{minWidth: 550}} aria-label=\"reviews table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell >Author</TableCell>\r\n            <TableCell align=\"center\">Excerpt</TableCell>\r\n            <TableCell align=\"right\">More</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {reviews.map((r) => (\r\n            <TableRow key={r.id}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {r.author}\r\n              </TableCell>\r\n              <TableCell >{excerpt(r.content)}</TableCell>\r\n              <TableCell >\r\n              <Link\r\n                  to={`/reviews/${r.id}`}\r\n                  state={{\r\n                      review: r,\r\n                      movie: movie,\r\n                  }}\r\n                >\r\n                  Full Review\r\n                </Link>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}","import truncate from \"lodash/truncate\";\r\n\r\nexport function excerpt(string) {\r\n  return truncate(string, {    \r\n    length: 400, // maximum 400 characters\r\n    separator: /,?\\.* +/, // separate by spaces, including preceding commas and periods\r\n  });\r\n}","import React, { useState } from \"react\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport AccessTimeIcon from \"@mui/icons-material/AccessTime\";\r\nimport MonetizationIcon from \"@mui/icons-material/MonetizationOn\";\r\nimport StarRate from \"@mui/icons-material/StarRate\";\r\nimport NavigationIcon from \"@mui/icons-material/Navigation\";\r\nimport Fab from \"@mui/material/Fab\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Drawer from \"@mui/material/Drawer\";\r\nimport MovieReviews from \"../movieReviews\"\r\n\r\n\r\nconst root = {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexWrap: \"wrap\",\r\n    listStyle: \"none\",\r\n    padding: 1.5,\r\n    margin: 0,\r\n};\r\nconst chip = { margin: 0.5 };\r\n\r\nconst MovieDetails = ({ movie }) => {  // Don't miss this!\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h5\" component=\"h3\">\r\n        Overview\r\n      </Typography>\r\n\r\n      <Typography variant=\"h6\" component=\"p\">\r\n        {movie.overview}\r\n      </Typography>\r\n\r\n      <Paper \r\n        component=\"ul\" \r\n        sx={{...root}}\r\n      >\r\n        <li>\r\n          <Chip label=\"Genres\" sx={{...chip}} color=\"primary\" />\r\n        </li>\r\n        {movie.genres.map((g) => (\r\n          <li key={g.name}>\r\n            <Chip label={g.name} sx={{...chip}} />\r\n          </li>\r\n        ))}\r\n      </Paper>\r\n      <Paper component=\"ul\" sx={{...root}}>\r\n        <Chip icon={<AccessTimeIcon />} label={`${movie.runtime} min.`} />\r\n        <Chip\r\n          icon={<MonetizationIcon />}\r\n          label={`${movie.revenue.toLocaleString()}`}\r\n        />\r\n        <Chip\r\n          icon={<StarRate />}\r\n          label={`${movie.vote_average} (${movie.vote_count}`}\r\n        />\r\n        <Chip label={`Released: ${movie.release_date}`} />\r\n      </Paper>\r\n      <Paper \r\n        component=\"ul\" \r\n        sx={{...root}}\r\n      >\r\n        <li>\r\n          <Chip label=\"Production countries\" sx={{...chip}} color=\"primary\" />\r\n        </li>\r\n        {movie.production_countries.map((p) => (\r\n          <li key={p.name}>\r\n            <Chip label={p.name} sx={{...chip}} />\r\n          </li>\r\n        ))}\r\n      </Paper>\r\n      <Fab\r\n        color=\"secondary\"\r\n        variant=\"extended\"\r\n        onClick={() =>setDrawerOpen(true)}\r\n        sx={{\r\n          position: 'fixed',\r\n          bottom: '1em',\r\n          right: '1em'\r\n        }}\r\n      >\r\n        <NavigationIcon />\r\n        Reviews\r\n      </Fab>\r\n      <Drawer anchor=\"top\" open={drawerOpen} onClose={() => setDrawerOpen(false)}>\r\n        <MovieReviews movie={movie} />\r\n      </Drawer>\r\n      </>\r\n  );\r\n};\r\nexport default MovieDetails ;","import React from \"react\";\r\nimport {Card, CardActionArea, CardContent, CardMedia, Grid, Typography} from \"@mui/material\";\r\nimport {Link} from \"react-router-dom\";\r\nimport img from \"../../../images/film-poster-placeholder.png\";\r\nimport {useQuery} from \"react-query\";\r\nimport {getMovieCredits} from \"../../../api/tmdb-api\";\r\nimport Spinner from \"../../spinner\";\r\n\r\nconst MovieCredits = ({movieId}) => {\r\n\r\n    const { data: credits, error, isLoading, isError } = useQuery(\r\n        [\"movieCredits\", { id: movieId }],\r\n        getMovieCredits\r\n    );\r\n\r\n    if (isLoading) {\r\n        return <Spinner />;\r\n    }\r\n\r\n    if (isError) {\r\n        return <h1>{error.message}</h1>;\r\n    }\r\n\r\n    const actors = credits.crew;\r\n\r\n    return (\r\n        <Grid container spacing={2} sx={{paddingTop: 2}}>\r\n            {actors.map((actor) => (\r\n                <Grid item xs={6} md={3} key={actor.id}>\r\n                    <Card>\r\n                        <CardActionArea>\r\n                            <Link to={`/actors/${actor.id}`}>\r\n                                <CardMedia\r\n                                    component=\"img\"\r\n                                    height=\"250\"\r\n                                    image={\r\n                                        actor.profile_path\r\n                                            ? `https://image.tmdb.org/t/p/w200${actor.profile_path}`\r\n                                            : img\r\n                                    }\r\n                                />\r\n                                <CardContent>\r\n                                    <Typography gutterBottom variant=\"subtitle2\">\r\n                                        {actor.name}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </Link>\r\n                        </CardActionArea>\r\n                    </Card>\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default MovieCredits;","import React from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\nimport MovieDetails from \"../components/movie/movieDetails/\";\r\nimport PageTemplate from \"../components/templatePage/templateMoviePage\";\r\nimport { getMovie } from '../api/tmdb-api'\r\nimport { useQuery } from \"react-query\";\r\nimport Spinner from '../components/spinner'\r\nimport MovieCredits from \"../components/movie/movieCredits\";\r\n// import useMovie from \"../hooks/useMovie\";\r\n\r\nconst MoviePage = (props) => {\r\n  const { id } = useParams();\r\n  const { data: movie, error, isLoading, isError } = useQuery(\r\n    [\"movie\", { id: id }],\r\n    getMovie\r\n  );\r\n\r\n  if (isLoading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  if (isError) {\r\n    return <h1>{error.message}</h1>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {movie ? (\r\n        <>\r\n          <PageTemplate movie={movie}>\r\n            <MovieDetails movie={movie} />\r\n            <MovieCredits movieId={movie.id} />\r\n          </PageTemplate>\r\n        </>\r\n      ) : (\r\n        <p>Waiting for movie details</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MoviePage;"],"names":["MovieReviews","_ref","movie","_useState","useState","_useState2","_slicedToArray","reviews","setReviews","useEffect","getMovieReviews","id","then","_jsx","TableContainer","component","Paper","children","_jsxs","Table","sx","minWidth","TableHead","TableRow","TableCell","align","TableBody","map","r","scope","author","string","content","truncate","length","separator","Link","to","concat","state","review","root","display","justifyContent","flexWrap","listStyle","padding","margin","chip","drawerOpen","setDrawerOpen","_Fragment","Typography","variant","overview","_objectSpread","Chip","label","color","genres","g","name","icon","AccessTimeIcon","runtime","MonetizationIcon","revenue","toLocaleString","StarRate","vote_average","vote_count","release_date","production_countries","p","Fab","onClick","position","bottom","right","NavigationIcon","Drawer","anchor","open","onClose","movieId","_useQuery","useQuery","getMovieCredits","credits","data","error","isLoading","isError","Spinner","message","actors","crew","Grid","container","spacing","paddingTop","actor","item","xs","md","Card","CardActionArea","CardMedia","height","image","profile_path","img","CardContent","gutterBottom","props","useParams","getMovie","PageTemplate","MovieDetails","MovieCredits"],"sourceRoot":""}